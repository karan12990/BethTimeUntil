@page "/store-item-check"
@inject NavigationManager NavigationManager


<div class="d-flex justify-content-center h-100">
    <div class="store-card-main">
        <div class="mb-2 back-div d-flex align-items-center gap-3" @onclick="BackToStoreManagement">
            <img src="/_content/Root/icons/left_arrow.png" alt="" class="ms-1"><span>Go Back</span>
        </div>
        <div class="px-3 py-4 store-card store-history-card">
            <p class="mb-4 fw-bold" style="font-size:20px;">204 Chatwood</p>
            <div class="d-flex align-items-center gap-3 mb-4">
                <div class="flex-fill">
                    <button class="btn btn-style">
                        <img src="/_content/Root/icons/history.png" alt="" width="16px">
                        <span>History</span>
                    </button>
                </div>
                <div class="flex-fill">
                    <button class="btn btn-style">
                        <img src="/_content/Root/icons/scan.png" alt="" width="16px">
                        <span>Scan</span>
                    </button>
                </div>
            </div>
            <div class="d-flex align-items-center gap-3 mb-4">
                <label for="myInput">Item</label>
                <div class="autocomplete">
                    <input id="myInput" type="text" name="myCountry" >
                    <img src="/_content/Root/icons/search.png" alt="" width="16px" class="search-icon">
                </div>
            </div>
            <div>
                <button class="btn btn-yellow w-100" @onclick="HandleContinue">Continue</button>
            </div>
        </div>
    </div>
</div>

<script>
    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function(e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

    /*An array containing all the country names in the world:*/
    var items = ["9256", "9257", "9267", "9378"];

    /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
    autocomplete(document.getElementById("myInput"), items);
</script>

@code {
    private void BackToStoreManagement()
    {
        NavigationManager.NavigateTo("/store-management");
    }

    private void HandleContinue()
    {
        NavigationManager.NavigateTo("/item-description");
    }
}
