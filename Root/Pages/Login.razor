@layout LoginLayout
@page "/"
@inject NavigationManager NavigationManager
@inject IAppService AppService
@using Root.Models
@inject IJSRuntime JSRuntime
@inject ILocalStorage localStorage

<div class="login-main row h-100 container-fluid p-0 m-0">
    <div class="col-lg-7 bg-yellow d-none d-lg-block p-5 login-left-main">
        <div>
            <p class="login-left-head">
                Putting more care <br> in pet care !!
            </p>
        </div>
    </div>
    <div class="col-lg-5 px-5 d-flex justify-content-center align-items-center login-form-main">
        <div class="login-form-box w-100 bg-white">
            <div class="login-header">
                <img src="/_content/Root/images/logo.png" alt="">
            </div>
            <div class="login-title">
                <p class="login-title-1 mb-1">Welcome Back</p>
                <p class="login-title-2">Enter your details to Login</p>
            </div>
            <EditForm Model="@loginModel" OnValidSubmit="Submit" FormName="loginForm">
                <DataAnnotationsValidator />
                <div class="login-form px-4 d-flex flex-column">
                    <div>
                        <label for="userName" class="mb-2">Username</label>
                        <input type="text" @bind-value="loginModel.UserName" class="form-control form-control-lg" id="userName" placeholder="Enter your username">
                        <ValidationMessage For="@(() => loginModel.UserName)" />
                    </div>
                    <div>
                        <label for="password" class="mb-2">Password</label>
                        <input type="password" @bind-value="loginModel.Password" class="form-control form-control-lg" id="password" placeholder="Enter your password">
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>
                    <button type="submit" class="btn w-100 mb-4 login-btn">
                        <span class="@_spinnerClass" role="status" aria-hidden="true" style="width: 1.5rem; height: 1.5rem;"></span>
                        Login
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private void HandleLogin()
    {
        NavigationManager.NavigateTo("/home");
    }

    private async Task ShowAlert(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }

    LoginModel loginModel = new();
    private string _spinnerClass = "";

    private async void Submit()
    {
        _spinnerClass = "spinner-border spinner-border-sm";
        // await Task.Delay(500);

        var response = await AppService.AuthenticateUser(loginModel);

        if (response.IsSuccess)
        {
            localStorage.SetItem("UserName", loginModel.UserName);
            localStorage.SetItem("Password", loginModel.Password);
            if (response.StoreUsers.Count() == 1)
            {
                var selectedStore = response.StoreUsers.FirstOrDefault();
                localStorage.SetItem("SelectedStoreCode", selectedStore.StoreCode);
                localStorage.SetItem("SelectedStoreName", selectedStore.StoreName);
                NavigationManager.NavigateTo("/store-management");
                
            }else
            {
                NavigationManager.NavigateTo("/home");
            }
        }
        else
        {
            await ShowAlert(response.ErrorMessage);
        }

        _spinnerClass = "";
        this.StateHasChanged();

    }
}
